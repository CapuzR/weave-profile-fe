type TokenIdentifier = text;
type Socials = 
 record {
   ceSo: opt CeSo;
   deSo: opt DeSo;
 };
type Result_2 = 
 variant {
   err: CommonError;
   ok: vec text;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: Profile;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type ProfileUpdate = record {bio: Bio;};
type Profile = 
 record {
   bio: Bio;
   id: principal;
 };
type Error = 
 variant {
   AlreadyExists;
   NotAuthorized;
   NotFound;
 };
type DeSo = 
 record {
   distrikt: opt text;
   dscvr: opt text;
   openChat: opt text;
 };
type CommonError = 
 variant {
   InvalidToken: TokenIdentifier;
   Other: text;
 };
type CeSo = 
 record {
   discord: opt text;
   facebook: opt text;
   instagram: opt text;
   tiktok: opt text;
   twitter: opt text;
 };
type Bio = 
 record {
   about: opt text;
   displayName: opt text;
   email: opt text;
   familyName: opt text;
   givenName: opt text;
   location: opt text;
   phone: opt text;
   socials: opt Socials;
   username: opt text;
 };
service : {
  createProfile: (ProfileUpdate) -> (Result);
  deleteProfile: () -> (Result);
  getDiscordHolders: (text) -> (Result_2);
  readProfile: () -> (Result_1);
  updateProfile: (ProfileUpdate) -> (Result);
}